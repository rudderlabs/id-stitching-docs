{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This dbt package searches your data warehouse for rows that contain multiple identifiers, then stitches all of the identifiers together in a unified ID graph table.</p> <p></p>"},{"location":"configuration/","title":"Configuration","text":"<p>This package is configured with dbt variables.</p> <p>Set ID columns in <code>dbt_project.yml</code>:</p> <pre><code>vars:\n  id-columns: ('user_id', 'anonymous_id', 'email', 'phone', 'salesforce_id')\n</code></pre> <p>Your data warehouse is searched for tables that include multiple columns defined in <code>id-columns</code>. The <code>id-columns</code> variable is required. All other variables are optional.</p>"},{"location":"configuration/#id-columns","title":"ID Columns","text":"<p>Specify columns that contain IDs.</p> <pre><code>vars:\n  id-columns: ('user_id', 'anonymous_id', 'email', 'phone', 'salesforce_id')\n</code></pre>"},{"location":"configuration/#exclude-ids","title":"Exclude IDs","text":"<p>Exclude specific IDs.</p> <pre><code>vars:\n  ids-to-exclude: ('user@company.com', '(555) 555-5555', '12345')\n</code></pre>"},{"location":"configuration/#include-schemas","title":"Include Schemas","text":"<p>Include only specific warehouse schemas.</p> <pre><code>vars:\n  schemas-to-include: ('marketing_site', 'stripe', 'google_ads')\n</code></pre>"},{"location":"configuration/#exclude-schemas","title":"Exclude Schemas","text":"<p>Exclude specific warehouse schemas.</p> <pre><code>vars:\n  schemas-to-exclude: ('test', 'steven')\n</code></pre>"},{"location":"configuration/#include-tables","title":"Include Tables","text":"<p>Include only specific tables.</p> <pre><code>vars:\n  tables-to-include: ('tickets', 'leads', 'identifies')\n</code></pre>"},{"location":"configuration/#exclude-tables","title":"Exclude Tables","text":"<p>Exclude specific tables.</p> <pre><code>vars:\n  tables-to-exclude: ('analytics', 'telemetry')\n</code></pre>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#which-data-warehouses-are-supported","title":"Which data warehouses are supported?","text":"<p>This package works with Snowflake, Redshift and PostgreSQL.</p>"},{"location":"faq/#can-tables-not-created-by-rudderstack-be-used","title":"Can tables not created by RudderStack be used?","text":"<p>Yes! This package can stitch IDs from any table in your warehouse.</p>"},{"location":"installation/","title":"Installation","text":"<p>Check dbt Hub for the latest version number.</p> <p>Include the following in your <code>packages.yml</code> file:</p> <pre><code>packages:\n  - package: rudderlabs/id_stitching\n    version: {LATEST_VERSION}\n</code></pre> <p>Run <code>dbt deps</code> to install the package.</p> <p>For more information on using packages in your dbt project, check out the dbt documentation. </p>"},{"location":"models/","title":"Models","text":"<p>The primary ouput of this package is <code>id_graph</code>. There are a few intermediate models used to create this model.</p> <p></p>"},{"location":"models/#queries","title":"queries","text":"<p>Creates a view containing SELECT statements which pull pairs of IDs from your tables.</p> sql_to_run SELECT DISTINCT email::TEXT AS node_a, 'email' AS node_a_label, user_id::TEXT AS node_b, 'user_id' AS node_b_label FROM db.web.identifies WHERE COALESCE(email::TEXT, '') != '' AND COALESCE(user_id::TEXT, '') != '' SELECT DISTINCT phone::TEXT AS node_a, 'phone' AS node_a_label, user_id::TEXT AS node_b, 'user_id' AS node_b_label FROM db.app.identifies WHERE COALESCE(phone::TEXT, '') != '' AND COALESCE(user_id::TEXT, '') != ''"},{"location":"models/#edges","title":"edges","text":"<p>An incremental model that combines the results of the SELECT statements generated by <code>queries</code> to create a table containing pairs of IDs (edges) the first time it is run, and matches edges on subsequent runs.</p> rudder_id original_rudder_id node_a node_a_label node_b node_b_label timestamp 1 1 user@company.com email 123456 user_id 2022-12-21 02:48:41.406655 1 2 555-555-5555 phone 123456 user_id 2022-12-21 02:48:41.406655"},{"location":"models/#check_edges","title":"check_edges","text":"<p>Creates a view that is used to determine if there are still edges to match.</p> rows_to_update consolidation_needed 0 FALSE"},{"location":"models/#id_graph","title":"id_graph","text":"<p>Creates an ID graph table.</p> rudder_id node label latest_timestamp 1 user@company.com email 2022-12-21 02:48:41.406655 1 123456 user_id 2022-12-21 02:48:41.406655 1 555-555-5555 phone 2022-12-21 02:48:41.406655"},{"location":"usage/","title":"Usage","text":"<ol> <li>Run <code>queries</code>, <code>edges</code> and <code>check_edges</code>.</li> <li>Run <code>edges</code> enough times to stitch all IDs. Query <code>check_edges</code> to determine if <code>edges</code> must be run again.</li> <li>Run <code>id_graph</code>.</li> </ol>"},{"location":"usage/#dbt-core","title":"dbt Core","text":""},{"location":"usage/#shell-script","title":"Shell Script","text":"<p>Run the included <code>run.sh</code> shell script:</p> <pre><code>./dbt_packages/id_stitching/run.sh\n</code></pre> <p>The loop can be edited to run <code>edges</code> the necessary number of times.</p> <pre><code>#!/bin/sh\n\ndbt run --full-refresh --select queries edges check_edges\n\nfor i in {1..5}\ndo\n  dbt run --select edges\ndone\n\ndbt run --select id_graph\n</code></pre>"},{"location":"usage/#python-script","title":"Python Script","text":"<p>A Python script can be used to automatically run <code>edges</code> to necessary number of times by evaluating <code>check_edges</code> in a while loop expression.</p> <pre><code>from os import system\nfrom sqlalchemy import create_engine, text\n\n\nengine = create_engine(\"dialect+driver://username:password@host:port/database\")\n\nsystem(\"dbt run --full-refresh --select queries edges check_edges\")\n\nwith engine.connect() as connection:\n    while connection.execute(text(\"SELECT rows_to_update FROM id_stitching.check_edges\")).first()[0]:\n        system(\"dbt run --select edges\")\n\nsystem(\"dbt run --select id_graph\")\n</code></pre>"},{"location":"usage/#dbt-cloud","title":"dbt Cloud","text":"<p>Create a job with the following commands:</p> <pre><code>dbt run --full-refresh --select queries edges check_edges\ndbt run --select edges\ndbt run --select edges\ndbt run --select edges\ndbt run --select edges\ndbt run --select id_graph\n</code></pre> <p>Add or remove runs of <code>edges</code> using the <code>check_edges</code> view.</p>"},{"location":"utilizing_id_graph/","title":"Utilizing the ID Graph","text":"<p>Our customer Amy's email address is <code>amy@gmail.com</code>. We can query <code>id_graph</code> to get all of Amy's IDs.</p> <pre><code>SELECT *\nFROM id_stitching.id_graph\nWHERE rudder_id = (\n  SELECT rudder_id\n  FROM id_stitching.id_graph\n  WHERE node = 'amy@gmail.com'\n)\n</code></pre> rudder_id node label 48 amy@gmail.com email 48 203984629341 user_id 48 162e704a-ea35-4076-9f52-50376c25710f anonymous_id 48 5c9b4cb0-c8d4-48f6-8c5c-c58fac94d77f anonymous_id 48 5556667777 phone 48 00530000003xqAb salesforce_id 48 cus_4QFOF3xrvB stripe_id <p>Since we know Amy's anonymous IDs, we can join our website pageviews table (<code>website.pages</code>) with <code>id_graph</code> to see all of the pages that Amy has viewed, including pages viewed before signup or login.</p> <pre><code>SELECT\n  rudder_id,\n  anonymous_id,\n  user_id,\n  context_traits_email,\n  path,\n  url,\n  referrer,\n  timestamp\nFROM website.pages AS p\nINNER JOIN id_stitching.id_graph AS i\n  ON p.anonymous_id = i.node\nWHERE i.rudder_id = 48\nORDER BY timestamp\n</code></pre> rudder_id anonymous_id user_id context_traits_email path url referrer timestamp 48 162e704a-ea35-4076-9f52-50376c25710f NULL NULL / https://company.com $direct 2022-11-18 23:02:35.231+00 48 162e704a-ea35-4076-9f52-50376c25710f null null /signup https://company.com/signup $direct 2022-11-18 23:02:42.432+00 48 162e704a-ea35-4076-9f52-50376c25710f 203984629341 amy@gmail.com /dashboard https://company.com/dashboard $direct 2022-11-18 23:03:12.244+00 48 162e704a-ea35-4076-9f52-50376c25710f 203984629341 amy@gmail.com /settings https://company.com/settings $direct 2022-11-18 23:03:54.173+00 <p>Although the first two events contain only <code>anonymous_id</code> as an identifier, we can use <code>id_graph</code> to attribute them to Amy, enriching our understanding of her user journey.</p>"}]}